@page
@model IndexModel
@{
    string PlaylistId = "pl.bf7a3cbca49644d8a33f09c1285aef5c";
}

<div class="container">
    <apple-music-artwork
        alt="Lofi Girl"
        source="https://is2-ssl.mzstatic.com/image/thumb/SG-MQ-US-032-Image000001/v4/a7/9d/a5/a79da565-983f-9755-5c84-a3001b8025fa/image/{w}x{h}cc.jpg"
        width="250"
    ></apple-music-artwork>
    <button id="authButton">Login</button>
    <div id="controls">
        <apple-music-playback-controls theme="dark"></apple-music-playback-controls>
    </div>
    <div id="volume">
        <apple-music-volume theme="dark"></apple-music-volume>
    </div>
</div>

<script>
    var music;
    const authButton = document.getElementById('authButton');


    document.addEventListener('musickitloaded', configureMusicKit);
    authButton.addEventListener('click', changeAuthorization);
    function addMusicKitEventListeners() {
        music.addEventListener('authorizationStatusDidChange', updateAuthButton);
        music.addEventListener('metadataDidChange', updateMediaMetadata);
        music.addEventListener('nowPlayingItemDidChange', updateMediaMetadata);
    }


    async function configureMusicKit() {
        try {
            music = await MusicKit.configure({
                developerToken: '@Model.Token',
                app: {
                    name: 'Lofi',
                    build: '1.0.0',
                },
            });
            addMusicKitEventListeners();
            updateAuthButton();
            music.setQueue({ playlist: '@PlaylistId' });
            music.shuffle = MusicKit.PlayerShuffleMode.songs;
            music.repeatMode = MusicKit.PlayerRepeatMode.all;
            registerMediaSessionHandles();
        } catch (err) {
            console.error(err);
        }
    }

    function changeAuthorization() {
        music.isAuthorized ? music.unauthorize() : music.authorize();
    }

    function updateAuthButton() {
        authButton.textContent = music.isAuthorized ? 'Logout' : 'Login';
    }

    function updateMediaMetadata() {
        if ('mediaSession' in navigator) {
            if (!music.nowPlayingItem || !music.nowPlayingItem.attributes) return;
            navigator.mediaSession.metadata = getMediaMetadata(music.nowPlayingItem);
        }
    }

    function getMediaMetadata(nowPlayingItem) {
        const data = nowPlayingItem.attributes;
        return new MediaMetadata({
            title: data.name || '',
            artist: data.artistName || '',
            album: data.albumName || '',
            artwork: data.artwork ? [96, 128, 192, 256, 384, 512].map(size => ({
                src: MusicKit.formatArtworkURL(data.artwork, size, size),
                sizes:`${size}x${size}`,
                type: 'image/jpeg'
            })) : []
        });
    }

    function registerMediaSessionHandles() {
        navigator.mediaSession.setActionHandler('play', async function () {
            await music.stop();
            await music.play();
        });

        navigator.mediaSession.setActionHandler('pause', async function () {
            await music.pause();
        });

        navigator.mediaSession.setActionHandler('previoustrack', async function () {
            music.skipToPreviousItem();
        });
        navigator.mediaSession.setActionHandler('nexttrack', async function () {
            music.skipToNextItem();
        });
    }
</script>